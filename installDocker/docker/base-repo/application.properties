# General Spring Boot Settings (do not change!)

spring.main.allow-bean-definition-overriding=true

# Server Settings for defining port and security

server.port: 8090
#server.ssl.key-store: keystore.p12
#server.ssl.key-store-password: test123
#server.ssl.keyStoreType: PKCS12
#server.ssl.keyAlias: tomcat

# Data transfer settings, e.g. transfer compression and multipart message size. 
# The properties max-file-size and max-request-size define the maximum size of files 
# transferred to and from the repository. Setting them to -1 removes all limits.

server.compression.enabled: false
spring.servlet.multipart.max-file-size: 1000MB
spring.servlet.multipart.max-request-size: 1000MB

# Spring Datasource Settings, e.g database type, connection string and login credentials.
# Furthermore, the settings at the end allow to enable logging of SQL queries for 
# debugging. By default, SQL logging should be disabled for performance reasons.

spring.datasource.platform: postgres
spring.datasource.url: jdbc:postgresql://postgres4kitdm:5432/kitdm20
spring.datasource.username:kitdm_admin
spring.datasource.password:kitdm4Docker
spring.datasource.driverClassName: org.postgresql.Driver
spring.jpa.database: POSTGRESQL
spring.jpa.database-platform: org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto: update
spring.jpa.show-sql: false
spring.jpa.properties.hibernate.use_sql_comments: false
spring.jpa.properties.hibernate.format_sql: false
   
# Spring Management Endpoint Settings. By default, the health endpoint will be 
# enabled to apply service monitoring including detailed information. 
# Furthermore, all endpoints will be exposed to external access. If this is not desired, 
# just comment the property 'management.endpoints.web.exposure.include' in order to only 
# allow local access.

management.endpoint.health.enabled: true
management.endpoint.health.show-details: ALWAYS
management.endpoint.health.sensitive: false
management.endpoints.web.exposure.include: *

# Logging Settings. Most logging of KIT DM is performed on TRACE level. However, if you
# plan to enable logging with this granularity it is recommended to this only for 
# a selection of a few packages. Otherwise, the amount of logging information might be
# overwhelming.

logging.level.root: WARN
#logging.level.edu.kit: TRACE
#logging.level.edu.kit.datamanager.episteme: TRACE
#logging.level.org.springframework: TRACE
#logging.level.org.springframework.amqp: DEBUG

###################################################################
##################  Repository Specific Settings ##################
###################################################################

# Enable/disable (default) authentication. If authentication is enabled, a separate 
# Authentication Service should be used in order to obtain JSON Web Tokens holding 
# login information. The token has then to be provided within the Authentication header
# of each HTTP request with a value of 'Bearer <TOKEN>' without quotes, replacing <TOKEN>
# be the token obtained from the authentication service.

repo.auth.enabled: false

# The jwtSecret is the mutual secret between all trusted services. This means, that if
# authentication is enabled, the jwtSecret used by the Authentication Service to sign
# issued JWTokens must be the same as the jwtSecret of the repository in order to 
# be able to validate the signature. By default, the secret should be selected randomly
# and with a sufficient length.

repo.auth.jwtSecret:NO_JWT_SECRET_DEFINED

# The base path where all uploaded data will be stored. The base path must be a URI 
# pointing to a local folder.

repo.basepath: file:///kitdm/archive 

# Enable (default)/disable messaging. The messaging functionality requires a RabbitMQ
# server receiving and distributing the messages sent by the repository. The server is 
# accessed via repo.messaging.hostname and repo.messaging.port 
# All other settings can remain unchanged, especially 'repo.messaging.binding.routingKeys'
# should not be changed in order to allow the repository message to be routed properly
# to the configured queue.

repo.messaging.enabled: false
repo.messaging.binding.exchange: repository_events
repo.messaging.binding.queue: repoEventQueue
repo.messaging.binding.routingKeys: dataresource.create.#, dataresource.update.#

# The rate in milliseconds at which the repository itself will check for new messages.
# E.g. if a resource has been created, the repository may has to perform additional
# ingest steps. Therefor, special handlers can be added which will be executed at the
# configured repo.schedule.rate if a new message has been received.

repo.schedule.rate:1000

# Enable (default)/disable audit functionalities. Auditing captures on the one hand 
# information about events occured at managed resources, e.g. create, update, delete 
# events, on the other hand the audit functionalty enabled versioning of resources.

repo.audit.enabled:false
